use anyhow::bail;
use valence_generated::block::BlockState;
use valence_math::{DVec3, Vec3};

use crate::{BlockPos, Decode, Encode, ItemStack, Packet, VarInt};

#[derive(Clone, Debug, Packet, Encode, Decode)]
pub struct LevelParticlesS2c {
    pub long_distance: bool,
    pub always_visible: bool,
    pub position: DVec3,
    pub offset: Vec3,
    pub max_speed: f32,
    pub count: i32,
    pub particle: Particle,
}

#[derive(Clone, PartialEq, Debug, Encode, Decode)]
pub enum Particle {
    AngryVillager,
    Block(BlockState),
    BlockMarker(BlockState),
    Bubble,
    Cloud,
    Crit,
    DamageIndicator,
    DragonBreath,
    DrippingLava,
    FallingLava,
    LandingLava,
    DrippingWater,
    FallingWater,
    Dust {
        /// The color, encoded as 0xRRGGBB; top bits are ignored.
        /// TODO: Does valence have a type for this?
        color: i32,
        //// The scale, will be clamped between 0.01 and 4.
        scale: f32,
    },
    DustColorTransition {
        /// The color to transition from, encoded as 0xRRGGBB; top bits are
        /// ignored. TODO: Does valence have a type for this?
        from_color: i32,
        /// The color to transition from, encoded as 0xRRGGBB; top bits are
        /// ignored. TODO: Does valence have a type for this?
        to_color: i32,
        /// The scale, will be clamped between 0.01 and 4.
        scale: f32,
    },
    Effect,
    ElderGuardian,
    EnchantedHit,
    Enchant,
    EndRod,
    EntityEffect {
        /// The ARGB components of the color encoded as an Int
        /// TODO: proper type
        color: i32,
    },
    ExplosionEmitter,
    Explosion,
    Gust,
    SmallGust,
    GustEmitterLarge,
    GustEmitterSmall,
    SonicBoom,
    FallingDust(BlockState),
    Firework,
    Fishing,
    Flame,
    Infested,
    CherryLeaves,
    PaleOakLeaves,
    TintedLeaves {
        /// The ARGB components of the color encoded as an Int
        /// TODO: type
        color: i32,
    },
    SculkSoul,
    SculkCharge {
        /// How much the particle will be rotated when displayed.
        roll: f32,
    },
    SculkChargePop,
    SoulFireFlame,
    Soul,
    Flash,
    HappyVillager,
    Composter,
    Heart,
    InstantEffect,
    /// If the item is air or its count is 0, the client might crash.
    // TODO: add check when encoding maybe?
    Item(Box<ItemStack>),
    Vibration {
        /// The type of the vibration source defined by the
        /// `minecraft:position_source_type` builtin registry.
        source: VibrationSourceType,
        /// The amount of ticks it takes for the vibration to travel from its
        /// source to its destination.
        ticks: VarInt,
    },
    Trail {
        position: DVec3,
        /// The trail color, encoded as 0xRRGGBB; top bits are ignored.
        color: i32,
        /// Life time in ticks
        duration: VarInt,
    },
    ItemSlime,
    ItemCobweb,
    ItemSnowball,
    LargeSmoke,
    Lava,
    Mycelium,
    Note,
    Poof,
    Portal,
    Rain,
    Smoke,
    WhiteSmoke,
    Sneeze,
    Spit,
    SquidInk,
    SweepAttack,
    TotemOfUndying,
    Underwater,
    Splash,
    Witch,
    BubblePop,
    CurrentDown,
    BubbleColumnUp,
    Nautilus,
    Dolphin,
    CampfireCosySmoke,
    CampfireSignalSmoke,
    DrippingHoney,
    FallingHoney,
    LandingHoney,
    FallingNectar,
    FallingSporeBlossom,
    Ash,
    CrimsonSpore,
    WarpedSpore,
    SporeBlossomAir,
    DrippingObsidianTear,
    FallingObsidianTear,
    LandingObsidianTear,
    ReversePortal,
    WhiteAsh,
    SmallFlame,
    Snowflake,
    DrippingDripstoneLava,
    FallingDripstoneLava,
    DrippingDripstoneWater,
    FallingDripstoneWater,
    GlowSquidInk,
    Glow,
    WaxOn,
    WaxOff,
    ElectricSpark,
    Scrape,
    Shriek {
        /// The time in ticks before the particle is displayed
        delay: VarInt,
    },
    EggCrack,
    DustPlume,
    TrialSpawnerDetection,
    TrialSpawnerDetectionOminous,
    VaultConnection,
    DustPillar(BlockState),
    OminousSpawning,
    RaidOmen,
    TrialOmen,
    BlockCrumble(BlockState),
    Firefly,
}

#[derive(Clone, PartialEq, Debug, Encode, Decode)]
pub enum VibrationSourceType {
    Block {
        /// The position of the block the vibration originated from.
        block_pos: BlockPos,
    },
    Entity {
        /// The ID of the entity the vibration originated from.
        // Based on the context im assuming this is not a EntityKind but a reference to a living
        // entity, do we have access to this from valence?
        kind: VarInt,
        /// Entity eye height.
        eye_height: f32,
    },
}

impl Particle {
    pub const fn id(&self) -> i32 {
        match self {
            Particle::AngryVillager => 0,
            Particle::Block(_) => 1,
            Particle::BlockMarker(_) => 2,
            Particle::Bubble => 3,
            Particle::Cloud => 4,
            Particle::Crit => 5,
            Particle::DamageIndicator => 6,
            Particle::DragonBreath => 7,
            Particle::DrippingLava => 8,
            Particle::FallingLava => 9,
            Particle::LandingLava => 10,
            Particle::DrippingWater => 11,
            Particle::FallingWater => 12,
            Particle::Dust { .. } => 13,
            Particle::DustColorTransition { .. } => 14,
            Particle::Effect => 15,
            Particle::ElderGuardian => 16,
            Particle::EnchantedHit => 17,
            Particle::Enchant => 18,
            Particle::EndRod => 19,
            Particle::EntityEffect { .. } => 20,
            Particle::ExplosionEmitter => 21,
            Particle::Explosion => 22,
            Particle::Gust => 23,
            Particle::SmallGust => 24,
            Particle::GustEmitterLarge => 25,
            Particle::GustEmitterSmall => 26,
            Particle::SonicBoom => 27,
            Particle::FallingDust(_) => 28,
            Particle::Firework => 29,
            Particle::Fishing => 30,
            Particle::Flame => 31,
            Particle::Infested => 32,
            Particle::CherryLeaves => 33,
            Particle::PaleOakLeaves => 34,
            Particle::TintedLeaves { .. } => 35,
            Particle::SculkSoul => 36,
            Particle::SculkCharge { .. } => 37,
            Particle::SculkChargePop => 38,
            Particle::SoulFireFlame => 39,
            Particle::Soul => 40,
            Particle::Flash => 41,
            Particle::HappyVillager => 42,
            Particle::Composter => 43,
            Particle::Heart => 44,
            Particle::InstantEffect => 45,
            Particle::Item(..) => 46,
            Particle::Vibration { .. } => 47,
            Particle::Trail { .. } => 48,
            Particle::ItemSlime => 49,
            Particle::ItemCobweb => 50,
            Particle::ItemSnowball => 51,
            Particle::LargeSmoke => 52,
            Particle::Lava => 53,
            Particle::Mycelium => 54,
            Particle::Note => 55,
            Particle::Poof => 56,
            Particle::Portal => 57,
            Particle::Rain => 58,
            Particle::Smoke => 59,
            Particle::WhiteSmoke => 60,
            Particle::Sneeze => 61,
            Particle::Spit => 62,
            Particle::SquidInk => 63,
            Particle::SweepAttack => 64,
            Particle::TotemOfUndying => 65,
            Particle::Underwater => 66,
            Particle::Splash => 67,
            Particle::Witch => 68,
            Particle::BubblePop => 69,
            Particle::CurrentDown => 70,
            Particle::BubbleColumnUp => 71,
            Particle::Nautilus => 72,
            Particle::Dolphin => 73,
            Particle::CampfireCosySmoke => 74,
            Particle::CampfireSignalSmoke => 75,
            Particle::DrippingHoney => 76,
            Particle::FallingHoney => 77,
            Particle::LandingHoney => 78,
            Particle::FallingNectar => 79,
            Particle::FallingSporeBlossom => 80,
            Particle::Ash => 81,
            Particle::CrimsonSpore => 82,
            Particle::WarpedSpore => 83,
            Particle::SporeBlossomAir => 84,
            Particle::DrippingObsidianTear => 85,
            Particle::FallingObsidianTear => 86,
            Particle::LandingObsidianTear => 87,
            Particle::ReversePortal => 88,
            Particle::WhiteAsh => 89,
            Particle::SmallFlame => 90,
            Particle::Snowflake => 91,
            Particle::DrippingDripstoneLava => 92,
            Particle::FallingDripstoneLava => 93,
            Particle::DrippingDripstoneWater => 94,
            Particle::FallingDripstoneWater => 95,
            Particle::GlowSquidInk => 96,
            Particle::Glow => 97,
            Particle::WaxOn => 98,
            Particle::WaxOff => 99,
            Particle::ElectricSpark => 100,
            Particle::Scrape => 101,
            Particle::Shriek { .. } => 102,
            Particle::EggCrack => 103,
            Particle::DustPlume => 104,
            Particle::TrialSpawnerDetection => 105,
            Particle::TrialSpawnerDetectionOminous => 106,
            Particle::VaultConnection => 107,
            Particle::DustPillar(_) => 108,
            Particle::OminousSpawning => 109,
            Particle::RaidOmen => 110,
            Particle::TrialOmen => 111,
            Particle::BlockCrumble(_) => 112,
            Particle::Firefly => 113,
        }
    }
}
